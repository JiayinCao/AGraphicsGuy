<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Graphics Guy&#39;s Note</title>
    <link>https://agraphicsguynotes.com/</link>
    <description>Recent content on A Graphics Guy&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Nov 2018 00:00:00 -0800</lastBuildDate><atom:link href="https://agraphicsguynotes.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Color Science For Graphics Engineer</title>
      <link>https://agraphicsguynotes.com/posts/basic_color_science_for_graphcis_engineer/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 -0800</pubDate>
      
      <guid>https://agraphicsguynotes.com/posts/basic_color_science_for_graphcis_engineer/</guid>
      <description>For more than a decade, we have been doing HDR rendering in our game engines, which means the intermediate render targets won&amp;rsquo;t be limited by the precision of the color formats. It is an even more important concept after the emerging of physically based rendering, which is almost what everyone does these days. However, after so much effort rendering everything in linear color space, it is quite wasteful that we can only display colors with only limited chromaticity and luminance defined by sRGB space due to limitations of LDR monitor and TVs.</description>
    </item>
    
    <item>
      <title>Sampling Anisotropic Microfacet BRDF</title>
      <link>https://agraphicsguynotes.com/posts/sample_anisotropic_microfacet_brdf/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://agraphicsguynotes.com/posts/sample_anisotropic_microfacet_brdf/</guid>
      <description>I am working on material system in my renderer recently. My old implementation of microfacet models only supports isotropic BRDF, as a result of which, it can&amp;rsquo;t render something like brushed metals in my renderer. After spending three days in my spare time to extend the system to support anisotropic microfacet BRDF, I easily noticed how much mathematics that it needs to understand all the importance sampling methods. The fact that $ \theta $ and $ \phi $ are somewhat correlated makes the importance sampling a lot more complex than isotropic model.</description>
    </item>
    
    <item>
      <title>Sampling Microfacet BRDF</title>
      <link>https://agraphicsguynotes.com/posts/sample_microfacet_brdf/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 -0700</pubDate>
      
      <guid>https://agraphicsguynotes.com/posts/sample_microfacet_brdf/</guid>
      <description>I&amp;rsquo;m working on microfacet brdf model for my renderer these days, noticing that it is more than necessary to provide a separate sampling method for microfacet brdf instead of using the default one, which is usually used for diffuse like surfaces and highly inefficient for brdf with spiky shape, such as mirror like surfaces. The following image is one generated by the default sampling method:
  The left monkey has pure reflection brdf which is mentioned in my previous blog post, the right one uses the microfacet model with zero as roughness value.</description>
    </item>
    
    <item>
      <title>Tessellation on DX11</title>
      <link>https://agraphicsguynotes.com/posts/tessellation_on_d3d11/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 -0700</pubDate>
      
      <guid>https://agraphicsguynotes.com/posts/tessellation_on_d3d11/</guid>
      <description>One of the most important changes that DX11 has made is the brand new feature called tessellation. By introducing three more stages, graphics programmer can tessellate their triangles on the fly. There are some benefits:
 Models with more geometry detail. With phong tessellation, it smoothes the silhouette so that no sharp edge corner will be visible. Combined with displacement map, tessellation can produce bump surfaces in a much more realistic way than what can be achieved with normal map or POM.</description>
    </item>
    
    <item>
      <title>About Myself</title>
      <link>https://agraphicsguynotes.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://agraphicsguynotes.com/about/</guid>
      <description>My name is Jiayin Cao. With more than 10 years working experiences in game industry, I’m currently working at Naughty Dog as a graphics programmer. Prior to joining Naughty Dog, I worked at Ubisoft, NVIDIA, AMD, and Microsoft before.
This is the place for me to take some notes that I regard as useful. Since I’m not sure about whether I can post about my work, most of these blogs here are the stuff that I learned in my own time.</description>
    </item>
    
  </channel>
</rss>
